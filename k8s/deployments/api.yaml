apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  labels:
    app: api

spec:
  replicas: 3
  selector:
    matchLabels:
      app: api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # Don't take any down
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: api
    spec:
      # Time to wait for a pod to gracefully shut down on receiving SIGTERM before sending SIGKILL.
      ## THIS IS REQUIRED OTHERWISE YOU WILL GET 502 ERRORS
      terminationGracePeriodSeconds: 10
      containers:
        - name: api
          image: plutomi/api:latest
          ports:
            - containerPort: 3000
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

          ## THIS IS REQUIRED OTHERWISE YOU WILL GET 502 ERRORS
          # You can use a preStop hook in your Kubernetes deployment to delay the termination of your pods,
          # giving your application more time to close existing connections gracefully.
          # The preStop hook can execute a command (like a sleep command) that delays the shutdown process,
          # providing a buffer for your application to complete any ongoing requests.
          # TODO - Verify if terminationGracePeriodSeconds still needed
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 10"]
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            # After the container has started, wait 10 seconds before starting the readiness checks
            initialDelaySeconds: 10
            # How often to perform the readiness probe
            periodSeconds: 5
